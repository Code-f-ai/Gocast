@use "sass:map";
@use "sass:meta";
@use "variables" as *;

@mixin media($type, $value) {
  // $value: map.get($breakpoints, $breakpoint);

  @if $value == null {
    @error "⛔ chưa tồn tại.";
  }

  @if $type == max {
    // $value: $value - 0.01px;
    $value: calc( $value - 0.01px);

    @media (max-width: $value) {
      @content;
    }
  } @else if $type == min {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @error "⛔ Loại media '#{$type}' không hợp lệ.";
  }
}

@mixin between($min, $max) {
  $minVal: map.get($breakpoints, $min);
  $maxVal: map.get($breakpoints, $max);

  @if $minVal == null or $maxVal == null {
    @error "⛔ Breakpoint '#{$min}' hoặc '#{$max}' không tồn tại.";
  }

  $maxVal: $maxVal - 0.01px;

  @media (min-width: $minVal) and (max-width: $maxVal) {
    @content;
  }
}

// @include media(min,xxxl)
// @include between(xxl,xxxl)
// @include between(xl,xxl)
// @include between(lg,xl)
// @include between(md,lg)
// @include between(sm,md)
// @include between(xs,sm)
// @include between(xxs,xs)
// @include media(max,xxs)

@mixin textellip($rows: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $rows;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: normal;
  word-break: break-word;
}

@mixin placeholder($color: $gray-color-2) {
  &::-webkit-input-placeholder {
    color: $color;
    font-size: 1.4rem;
    font-weight: 400;
  }
  &::-moz-placeholder {
    color: $color;
    font-size: 1.4rem;
    font-weight: 400;
  }
  &::-ms-input-placeholder {
    color: $color;
  }
}

@mixin imgcover() {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin size($width: 0, $height: $width) {
  width: $width;
  height: $height;
}

@mixin positon($top: auto, $right: $top, $bottom: $top, $left: $top) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// @mixin font-weight($weight) {
//   $map: (
//     thin: 100,
//     extralight: 200,
//     light: 300,
//     regular: 400,
//     medium: 500,
//     semibold: 600,
//     bold: 700,
//     extrabold: 800,
//     black: 900,
//   );
//   @if meta.type-of($weight) == "number" {
//     font-weight: $weight;
//   } @else if map.has-key($map, $weight) {
//     font-weight: map.get($map, $weight);
//   } @else {
//     @warn "⚠️ font-weight '#{$weight}' không hợp lệ. Dùng số hoặc 1 trong: #{map.keys($map)}";
//   }
// }

@mixin flexbox($align: center, $justify: center, $gap: 0,$direction: row) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  gap: $gap;
  flex-direction: $direction;
}

@mixin Typography($weight: null, $size: null, $line: null, $style: null) {
  @if $weight != null {
    font-weight: $weight;
  }
  @if $size != null {
    font-size: $size;
  }
  @if $line != null {
    line-height: $line;
  }
  @if $style != null {
    font-style: $style;
  }
}

@mixin text-gradient($vector: to right,$color1: null,$color2: null){
  background: linear-gradient($vector,$color1,$color2);
  color: transparent;
  -webkit-background-clip: text;
  background-clip: text;
}

//ẩn thanh scroll bar 
@mixin hideScroll(){
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar{
      display: none;
  }
}

